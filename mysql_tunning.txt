---- query to check the index fregmentation

SELECT
    table_name,
    data_free,
    round((data_free / data_length) * 100, 2) AS fragmentation_percentage
FROM information_schema.tables
WHERE table_schema = 'sbivoiceanalytics'
AND engine = 'InnoDB'
AND data_free > 0;


----- query to check the free data in the table 

SELECT table_name, data_free
FROM information_schema.tables
WHERE table_schema = 'sbivoiceanalytics'
AND table_name = 'calltrans';


----- query to check the indexes in table

SHOW INDEX FROM table_name

----OPTIMIZE TABLE

Purpose: Physically reorganizes table data and indexes to improve storage efficiency and query performance.

Usage: Recommended when a table has undergone significant deletions (which leave gaps in data pages) or when there is a noticeable performance degradation.

Effect: Rebuilds the table's data and index pages, reclaiming wasted space and improving data locality for faster access.

OPTIMIZE TABLE your_table_name;




----- ANALYZE TABLE

Purpose: Updates index statistics to improve query performance by providing the optimizer with accurate information about the data distribution.

Usage: Typically used after significant changes to data (inserts, updates, deletes) or to tables that experience high data turnover.


ANALYZE TABLE table_name;


------Query to Check Database Sizes

SELECT 
    table_schema AS `Database`, 
    SUM(data_length + index_length) / 1024 / 1024 AS `Size_in_MB`
FROM 
    information_schema.tables 
WHERE 
    table_schema NOT IN ('information_schema', 'mysql', 'performance_schema')
GROUP BY 
    table_schema;

---- in Explain select * From table name # the out put query reporesent's 

| Column             | Meaning                                                                              |
| ------------------ | ------------------------------------------------------------------------------------ |
| **id**             | `1` means this is the first (and only) query in your plan (not a subquery or UNION). |
| **select\_type**   | `SIMPLE` means it's a basic `SELECT` without subqueries or UNIONs.                   |
| **table**          | The table being accessed: `contacts`.                                                |
| **partitions**     | `NULL` means no partitioning is used (or applicable).                                |
| **type**           | `ALL` is the **worst** join type — it means a **full table scan**.                   |
| **possible\_keys** | `NULL` — there are **no indexes** that MySQL considers useful for this query.        |
| **key**            | `NULL` — **no index is used**.                                                       |
| **key\_len**       | `NULL` — no index is chosen, so this is blank.                                       |
| **ref**            | `NULL` — no reference column, since there's no index.                                |
| **rows**           | `216` — MySQL estimates it will scan 216 rows.                                       |
| **filtered**       | `29.76` — About 29.76% of those rows will pass the `WHERE` condition.                |
| **Extra**          | `Using where` — MySQL is filtering rows with your `WHERE` clause.                    |


# How MySQL Uses Composite Indexes
create index idx_chat on chat_history(user_id,agent_id, contact_id,created_date)

| WHERE Clause                                            | Will Use Index?                         |
| ------------------------------------------------------- | --------------------------------------- |
| `WHERE user_id = ?`                                     | ✅ Yes                                   |
| `WHERE user_id = ? AND agent_id = ?`                    | ✅ Yes                                   |
| `WHERE user_id = ? AND agent_id = ? AND contact_id = ?` | ✅ Yes                                   |
| `WHERE user_id = ? AND created_date = ?`                | ❌ No (skipped `agent_id`, `contact_id`) |
| `WHERE created_date BETWEEN ...`                        | ❌ No                                    |
| `WHERE agent_id = ?`                                    | ❌ No                                    |





