Prerequisites

1. MySQL replication setup: Ensure that MySQL replication is already configured between the master and the slave.

2. Sufficient disk space: Ensure the slave server has enough disk space to accommodate the additional database.

Steps to Add a Large Database to Replication

1. Prepare the Master Server

A) Stop Writes to the New Database:
   
   Ensure no new writes occur to the database during the backup process. This can be achieved by setting the application to    read-only mode for the new database or temporarily stopping the application.

B) Lock the Database (Optional):
	
     If stopping writes is not feasible, you can lock the tables to ensure data consistency during the backup.

SQL> FLUSH TABLES WITH READ LOCK;

2. Backup the Database

A) Use mysqldump for Logical Backup (not recommended for 1 TB database due to time consumption):

SQL> mysqldump --databases your_large_database --single-transaction --master-data=2 --hex-blob --user=root -p > your_large_database.sql

B) Use xtrabackup for Physical Backup (recommended for large databases):

Install Percona XtraBackup if not already installed.

xtrabackup --backup --datadir=/var/lib/mysql/ --target-dir=/path/to/backup/dir/

Prepare the backup:

xtrabackup --prepare --target-dir=/path/to/backup/dir/


3. Transfer the Backup to the Slave Server

 Copy the backup files to the slave server. Use rsync or another efficient method.

rsync -avz /path/to/backup/dir/ slave_server:/path/to/backup/dir/

4. Prepare the Slave Server


A) Stop the MySQL Service on the Slave:

 sudo systemctl stop mysql

B) Restore the Backup on the Slave:

 xtrabackup --copy-back --target-dir=/path/to/backup/dir/

Ensure the file permissions are correct:

chown -R mysql:mysql /var/lib/mysql/

C) Configure the Slave:

If the mysqldump backup was used, configure the slave to use the appropriate binary log file and position recorded in the dump file. If xtrabackup was used, the binary log file and position are in the xtrabackup_binlog_info file.

SQL > CHANGE MASTER TO
    MASTER_HOST='master_host',
    MASTER_USER='replication_user',
    MASTER_PASSWORD='replication_password',
    MASTER_LOG_FILE='mysql-bin.000001', -- adjust this
    MASTER_LOG_POS=123456; -- adjust this

5. Start Replication on the Slave

Start the MySQL service on the slave server:

sudo systemctl start mysql

Then, start the replication:

SQL> START SLAVE;

6. Verify Replication

A) Check the Slave Status:

SQL> SHOW SLAVE STATUS\G

NOTE : Ensure that Slave_IO_Running and Slave_SQL_Running are both Yes, and Seconds_Behind_Master is 0 or close to 0.

B) Monitor Logs:

 Check the MySQL error logs on both the master and slave servers for any replication-related errors.

7. Release the Locks (if any)

SQL> UNLOCK TABLES;

Additional Considerations
a) Network Bandwidth: Ensure you have sufficient network bandwidth to handle the transfer of large amounts of data.

b) Backup Compression: Compress the backup to reduce transfer time and storage requirements.

c) Incremental Backups: For very large databases, consider using incremental backups to reduce downtime and the size of the backup.

d) Testing: Always test the replication setup in a staging environment before applying it to production.

